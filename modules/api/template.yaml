AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Cevixe Stack - GraphQL Api

Parameters:
  ApplicationName:
    Type: String
    MaxLength: 120
    Description: cevixe application name

Resources:
  eventStoreAppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
  eventStoreDynamodbAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - "-"
          - - !Ref ApplicationName
            - 'EventStoreDynamodbAccessPolicy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:Query"
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
            Resource:
              - Fn::ImportValue:
                  Fn::Join:
                    - "-"
                    - - !Ref ApplicationName
                      - 'EventStoreArn'
              - Fn::Join:
                  - "/"
                  - - Fn::ImportValue:
                        Fn::Join:
                          - "-"
                          - - !Ref ApplicationName
                            - 'EventStoreArn'
                    - "index"
                    - "*"
      Roles:
        - Ref: eventStoreAppSyncServiceRole

  stateStoreAppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
  stateStoreDynamodbAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - "-"
          - - !Ref ApplicationName
            - 'StateStoreDynamodbAccessPolicy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:Query"
              - "dynamodb:GetItem"
            Resource:
              - Fn::ImportValue:
                  Fn::Join:
                    - "-"
                    - - !Ref ApplicationName
                      - 'StateStoreArn'
              - Fn::Join:
                  - "/"
                  - - Fn::ImportValue:
                        Fn::Join:
                          - "-"
                          - - !Ref ApplicationName
                            - 'StateStoreArn'
                    - "index"
                    - "*"
      Roles:
        - Ref: stateStoreAppSyncServiceRole

  GraphqlGateway:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: CevixeGraphqlGateway
      AuthenticationType: API_KEY
      AdditionalAuthenticationProviders:
        - AuthenticationType: AWS_IAM
  GraphqlGatewayApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt GraphqlGateway.ApiId

  EventStoreDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphqlGateway.ApiId
      Name:
        Fn::Join:
          - "_"
          - - !Join [ '_', !Split [ '-', !Ref ApplicationName ] ]
            - 'EventStoreDataSource'
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt eventStoreAppSyncServiceRole.Arn
      DynamoDBConfig:
        AwsRegion: !Ref "AWS::Region"
        TableName:
          Fn::ImportValue:
            Fn::Join:
              - "-"
              - - !Ref ApplicationName
                - 'EventStoreName'
        UseCallerCredentials: false
        Versioned: false
  StateStoreDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphqlGateway.ApiId
      Name:
        Fn::Join:
          - "_"
          - - !Join [ '_', !Split [ '-', !Ref ApplicationName ] ]
            - 'StateStoreDataSource'
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt stateStoreAppSyncServiceRole.Arn
      DynamoDBConfig:
        AwsRegion: !Ref "AWS::Region"
        TableName:
          Fn::ImportValue:
            Fn::Join:
              - "-"
              - - !Ref ApplicationName
                - 'StateStoreName'
        UseCallerCredentials: false
        Versioned: true
  MockDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphqlGateway.ApiId
      Name:
        Fn::Join:
          - "_"
          - - !Join [ '_', !Split [ '-', !Ref ApplicationName ] ]
            - 'MockDataSource'
      Type: NONE

  CreateCommandEventFn:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt GraphqlGateway.ApiId
      DataSourceName: !GetAtt EventStoreDataSource.Name
      FunctionVersion: 2018-05-29
      Name: 'CevixeCreateCommandEventFn'
      RequestMappingTemplate: |
        #set( $validEventType = !$util.isNullOrBlank($ctx.stash.type) )
        #set( $validEventData = !$util.isNull($ctx.stash.data) || !$util.isNull($ctx.stash.ref) )

        $util.qr( $util.validate( $validEventType , "command event type not specified" ) )
        $util.qr( $util.validate( $validEventData , "command event data or ref not specified" ) )

        #set( $regex = "([a-z])([A-Z]+)")
        #set( $replacement = "$1-$2")

        #set( $tracingHeader = $context.request.headers["x-amzn-trace-id"] )
        #set( $transaction = $util.defaultIfNullOrBlank($tracingHeader.replaceAll("Root=", ""), $util.autoId()) )

        #set( $eventId =  $util.autoId() )
        #set( $eventClass =  "C" )
        #set( $eventType =  $ctx.stash.type )
        #set( $eventSource = "/command/$ctx.stash.type.replaceAll($regex, $replacement).toLowerCase()" )
        #set( $eventTime = $util.time.nowEpochMilliSeconds() )
        #set( $eventAuthor = $util.defaultIfNullOrBlank($context.identity.username, "Unknown") )

        #if( $util.isNull($ctx.stash.ref) )
          #set( $eventData = $ctx.stash.data )
        #else
          #set( $eventRef = $ctx.stash.ref )
        #end

        $util.qr( $ctx.stash.put("transaction", $transaction) )

        {
          "version" : "2018-05-29",
          "operation" : "PutItem",
          "key" : {
            "event_source": $util.dynamodb.toDynamoDBJson($eventSource),
            "event_id": $util.dynamodb.toDynamoDBJson($eventId)
          },
          "attributeValues": {
            "reference": $util.dynamodb.toDynamoDBJson($eventRef),
            "event_class": $util.dynamodb.toDynamoDBJson($eventClass),
            "event_type": $util.dynamodb.toDynamoDBJson($eventType),
            "event_time": $util.dynamodb.toDynamoDBJson($eventTime),
            "event_author": $util.dynamodb.toDynamoDBJson($eventAuthor),
            "event_data": $util.dynamodb.toDynamoDBJson($eventData),
            "transaction": $util.dynamodb.toDynamoDBJson($transaction)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
            $util.error($ctx.error.message, $ctx.error.type)
            null
        #else
          $util.toJson("$ctx.stash.transaction")
        #end
  PublishEventMessageFn:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt GraphqlGateway.ApiId
      DataSourceName: !GetAtt MockDataSource.Name
      FunctionVersion: 2018-05-29
      Name: 'CevixePublishEventMessageFn'
      RequestMappingTemplate: |
        {
            "version": "2018-05-29",
            "payload": $util.toJson($ctx.stash.message)
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  GetEventByIdFn:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt GraphqlGateway.ApiId
      DataSourceName: !GetAtt EventStoreDataSource.Name
      FunctionVersion: 2018-05-29
      Name: 'CevixeGetEventByIdFn'
      RequestMappingTemplate: |
        #set( $validEventSource = !$util.isNullOrBlank($ctx.stash.source) )
        #set( $validEventId = !$util.isNullOrBlank($ctx.stash.id) )

        $util.qr( $util.validate( $validEventSource, "event source not specified" ) )
        $util.qr( $util.validate( $validEventId, "event id not specified" ) )

        {
            "version" : "2017-02-28",
            "operation" : "GetItem",
            "key" : {
                "event_source": $util.dynamodb.toDynamoDBJson("$ctx.stash.source"),
                "event_id" : $util.dynamodb.toDynamoDBJson("$ctx.stash.id")
            }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
            $util.error($ctx.error.message, $ctx.error.type)
            null
        #else
          #set($Integer = 0)
          #if( !$util.isNull($ctx.result) )
            #set( $item = $ctx.result )
            #if( !$util.isNull($item.reference) )
              #set( $reference =  $util.parseJson($item.reference) )
            #end
            #set( $event = $util.defaultIfNull($item.event_data, {}) )
            $util.qr( $event.put("__typename", $item.event_type) )
            $util.qr( $event.put("_id", $item.event_id) )
            $util.qr( $event.put("_source", $item.event_source) )
            $util.qr( $event.put("_class", $item.event_class) )
            $util.qr( $event.put("_type", $item.event_type) )
            $util.qr( $event.put("_time", $util.time.epochMilliSecondsToISO8601($item.event_time)) )
            $util.qr( $event.put("_author", $item.event_author) )
            $util.qr( $event.put("_transaction", $item.transaction) )
            #if( $item.event_class == "D" )
              #set( $entity = $util.defaultIfNull($item.entity_state, {}) )
              $util.qr( $entity.put("__typename", $item.entity_type) )
              $util.qr( $entity.put("_id", $item.entity_id) )
              $util.qr( $entity.put("_type", $item.entity_type) )
              $util.qr( $entity.put("_version", $Integer.parseInt($item.event_id)) )
              $util.qr( $entity.put("_updatedAt", $util.time.epochMilliSecondsToISO8601($item.event_time)) )
              $util.qr( $entity.put("_updatedBy", $item.event_author) )
              $util.qr( $entity.put("_createdAt", $util.time.epochMilliSecondsToISO8601($item.entity_created_at)) )
              $util.qr( $entity.put("_createdBy", $item.entity_created_by) )
              $util.qr( $event.put("_entity", $entity) )
            #end
            $util.toJson($event)
          #else
            null
          #end
        #end
  GetDomainEventsFn:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt GraphqlGateway.ApiId
      DataSourceName: !GetAtt EventStoreDataSource.Name
      FunctionVersion: 2018-05-29
      Name: 'CevixeGetDomainEventsFn'
      RequestMappingTemplate: |
        #set( $validEntityType =  !$util.isNullOrBlank($ctx.stash.entityType) )
        #set( $validEntityId = !$util.isNullOrBlank($ctx.stash.entityId) )

        $util.qr( $util.validate( $validEntityType, "entity type not specified" ) )
        $util.qr( $util.validate( $validEntityId, "entity id not specified" ) )

        #set( $regex = "([a-z])([A-Z]+)")
        #set( $replacement = "$1-$2")
        {
            "version" : "2017-02-28",
            "operation" : "Query",
            "query" : {
              "expression": "event_source = :source",
              "expressionValues" : {
                ":source" : $util.dynamodb.toDynamoDBJson("/domain/$ctx.stash.entityType.replaceAll($regex, $replacement).toLowerCase()/$ctx.stash.entityId")
              }
            },
            "limit": $util.defaultIfNull(${ctx.stash.limit}, 20),
            "nextToken": $util.toJson($util.defaultIfNullOrBlank($ctx.stash.nextToken, null))
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
            $util.error($ctx.error.message, $ctx.error.type)
            null
        #else
          #set( $result = [] )
          #foreach( $item in $context.result.items  )
            #if( !$util.isNull($item.reference) )
              #set( $reference =  $util.parseJson($item.reference) )
            #end
            #set( $event = $util.defaultIfNull($item.event_data, {}) )
            $util.qr( $event.put("__typename", $item.event_type) )
            $util.qr( $event.put("_id", $item.event_id) )
            $util.qr( $event.put("_source", $item.event_source) )
            $util.qr( $event.put("_class", $item.event_class) )
            $util.qr( $event.put("_type", $item.event_type) )
            $util.qr( $event.put("_time", $util.time.epochMilliSecondsToISO8601($item.event_time)) )
            $util.qr( $event.put("_author", $item.event_author) )
            $util.qr( $event.put("_transaction", $item.transaction) )
            #set( $entity = $util.defaultIfNull($item.entity_state, {}) )
            $util.qr( $entity.put("__typename", $item.entity_type) )
            $util.qr( $entity.put("_id", $item.entity_id) )
            $util.qr( $entity.put("_type", $item.entity_type) )
            $util.qr( $entity.put("_version", $Integer.parseInt($item.event_id)) )
            $util.qr( $entity.put("_updatedAt", $util.time.epochMilliSecondsToISO8601($item.event_time)) )
            $util.qr( $entity.put("_updatedBy", $item.event_author) )
            $util.qr( $entity.put("_createdAt", $util.time.epochMilliSecondsToISO8601($item.entity_created_at)) )
            $util.qr( $entity.put("_createdBy", $item.entity_created_by) )
            $util.qr( $event.put("_entity", $entity) )
            $util.qr($result.add($event))
          #end
          {
            "items": $util.toJson($result),
            "nextToken": $util.toJson($util.defaultIfNullOrBlank($context.result.nextToken, null))
          }
        #end

  GetTransactionEventsFn:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt GraphqlGateway.ApiId
      DataSourceName: !GetAtt EventStoreDataSource.Name
      FunctionVersion: 2018-05-29
      Name: 'CevixeGetTransactionEventsFn'
      RequestMappingTemplate: |
        #set( $validTransactionId =  !$util.isNullOrBlank($ctx.stash.transactionId) )

        $util.qr( $util.validate( $validTransactionId, "transaction id not specified" ) )
        {
            "version" : "2017-02-28",
            "operation" : "Query",
            "index" : "transaction-time-index",
            "scanIndexForward" : true,
            "query" : {
              "expression": "#transaction = :transaction",
              "expressionNames" : {
                "#transaction" : "transaction"
              },
              "expressionValues" : {
                ":transaction" : $util.dynamodb.toDynamoDBJson("$ctx.stash.transactionId")
              }
            },
            "limit": $util.defaultIfNull(${ctx.stash.limit}, 20),
            "nextToken": $util.toJson($util.defaultIfNullOrBlank($ctx.stash.nextToken, null))
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
            $util.error($ctx.error.message, $ctx.error.type)
            null
        #else
          #set( $result = [] )
          #foreach( $item in $context.result.items  )
            #if( !$util.isNull($item.reference) )
              #set( $reference =  $util.parseJson($item.reference) )
            #end
            #set( $event = $util.defaultIfNull($item.event_data, {}) )
            $util.qr( $event.put("__typename", $item.event_type) )
            $util.qr( $event.put("_id", $item.event_id) )
            $util.qr( $event.put("_source", $item.event_source) )
            $util.qr( $event.put("_class", $item.event_class) )
            $util.qr( $event.put("_type", $item.event_type) )
            $util.qr( $event.put("_time", $util.time.epochMilliSecondsToISO8601($item.event_time)) )
            $util.qr( $event.put("_author", $item.event_author) )
            $util.qr( $event.put("_transaction", $item.transaction) )
            #if( $item.event_class == "D" )
              #set( $entity = $util.defaultIfNull($item.entity_state, {}) )
              $util.qr( $entity.put("__typename", $item.entity_type) )
              $util.qr( $entity.put("_id", $item.entity_id) )
              $util.qr( $entity.put("_type", $item.entity_type) )
              $util.qr( $entity.put("_version", $Integer.parseInt($item.event_id)) )
              $util.qr( $entity.put("_updatedAt", $util.time.epochMilliSecondsToISO8601($item.event_time)) )
              $util.qr( $entity.put("_updatedBy", $item.event_author) )
              $util.qr( $entity.put("_createdAt", $util.time.epochMilliSecondsToISO8601($item.entity_created_at)) )
              $util.qr( $entity.put("_createdBy", $item.entity_created_by) )
              $util.qr( $event.put("_entity", $entity) )
            #end
            $util.qr($result.add($event))
          #end
          {
            "items": $util.toJson($result),
            "nextToken": $util.toJson($util.defaultIfNullOrBlank($context.result.nextToken, null))
          }
        #end
  GetEntitiesByTypeFn:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt GraphqlGateway.ApiId
      DataSourceName: !GetAtt StateStoreDataSource.Name
      FunctionVersion: 2018-05-29
      Name: 'CevixeGetEntitiesByTypeFn'
      RequestMappingTemplate: |
        #set( $validType = !$util.isNullOrBlank($ctx.stash.type) )

        $util.qr( $util.validate( $validType, "entity type not specified" ) )
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "query" : {
            "expression": "#type = :type",
            "expressionNames" : {
              "#type" : "type"
            },
            "expressionValues" : {
              ":type" : $util.dynamodb.toDynamoDBJson("$ctx.stash.type")
            }
          },
          "limit": $util.defaultIfNull(${ctx.stash.limit}, 20),
          "nextToken": $util.toJson($util.defaultIfNullOrBlank($ctx.stash.nextToken, null))
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
            $util.error($ctx.error.message, $ctx.error.type)
            null
        #else
          #set( $result = [] )
          #foreach( $item in $context.result.items  )
            #if( !$util.isNull($item.reference) )
              #set( $reference =  $util.parseJson($item.reference) )
            #end
            #set( $entity = $util.defaultIfNull($item.state, {}) )
            $util.qr( $entity.put("__typename", $item.type) )
            $util.qr( $entity.put("_id", $item.id) )
            $util.qr( $entity.put("_type", $item.type) )
            $util.qr( $entity.put("_version", $item.version) )
            $util.qr( $entity.put("_updatedAt", $util.time.epochMilliSecondsToISO8601($item.updated_at)) )
            $util.qr( $entity.put("_updatedBy", $item.updated_by) )
            $util.qr( $entity.put("_createdAt", $util.time.epochMilliSecondsToISO8601($item.created_at)) )
            $util.qr( $entity.put("_createdBy", $item.created_by) )
            $util.qr($result.add($entity))
          #end
          {
            "items": $util.toJson($result),
            "nextToken": $util.toJson($util.defaultIfNullOrBlank($context.result.nextToken, null))
          }
        #end
  GetEntityByIdFn:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt GraphqlGateway.ApiId
      DataSourceName: !GetAtt EventStoreDataSource.Name
      FunctionVersion: 2018-05-29
      Name: 'CevixeGetEntityByIdFn'
      RequestMappingTemplate: |
        #set( $validType = !$util.isNullOrBlank($ctx.stash.type) )
        #set( $validId = !$util.isNullOrBlank($ctx.stash.id) )

        $util.qr( $util.validate( $validType, "entity type not specified" ) )
        $util.qr( $util.validate( $validId, "entity id not specified" ) )

        #set( $regex = "([a-z])([A-Z]+)")
        #set( $replacement = "$1-$2")
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "limit" : 1,
          "scanIndexForward" : false,
          "query" : {
            "expression": "event_source = :source",
            "expressionValues" : {
              ":source" : $util.dynamodb.toDynamoDBJson("/domain/$ctx.stash.type.replaceAll($regex, $replacement).toLowerCase()/$ctx.stash.id")
            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
            $util.error($ctx.error.message, $ctx.error.type)
            null
        #else
          #set( $Integer = 0 )
          #if( $ctx.result.items.size() > 0 )
            #set( $item = $ctx.result.items[0] )
            #if( !$util.isNull($item.reference) )
              #set( $reference =  $util.parseJson($item.reference) )
            #end
            #set( $entity = $util.defaultIfNull($item.entity_state, {}) )
            $util.qr( $entity.put("__typename", $item.entity_type) )
            $util.qr( $entity.put("_id", $item.entity_id) )
            $util.qr( $entity.put("_type", $item.entity_type) )
            $util.qr( $entity.put("_version", $Integer.parseInt($item.event_id)) )
            $util.qr( $entity.put("_updatedAt", $util.time.epochMilliSecondsToISO8601($item.event_time)) )
            $util.qr( $entity.put("_updatedBy", $item.event_author) )
            $util.qr( $entity.put("_createdAt", $util.time.epochMilliSecondsToISO8601($item.entity_created_at)) )
            $util.qr( $entity.put("_createdBy", $item.entity_created_by) )
            $util.toJson( $entity )
          #else
            null
          #end
        #end

  GetEntityVersionFn:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt GraphqlGateway.ApiId
      DataSourceName: !GetAtt EventStoreDataSource.Name
      FunctionVersion: 2018-05-29
      Name: 'CevixeGetEntityVersionFn'
      RequestMappingTemplate: |
        #set( $validType = !$util.isNullOrBlank($ctx.stash.type) )
        #set( $validId = !$util.isNullOrBlank($ctx.stash.id) )
        #set( $validVersion = $util.isNumber($ctx.stash.version) && $ctx.stash.version > 0 )

        $util.qr( $util.validate( $validType, "entity type not specified" ) )
        $util.qr( $util.validate( $validId, "entity id not specified" ) )
        $util.qr( $util.validate( $validVersion, "entity version not specified" ) )

        #set( $regex = "([a-z])([A-Z]+)")
        #set( $replacement = "$1-$2")
        {
            "version" : "2017-02-28",
            "operation" : "GetItem",
            "key" : {
                "event_source": $util.dynamodb.toDynamoDBJson("/domain/$ctx.stash.type.replaceAll($regex, $replacement).toLowerCase()/$ctx.stash.id"),
                "event_id" : $util.dynamodb.toDynamoDBJson("$ctx.stash.version")
            }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
            $util.error($ctx.error.message, $ctx.error.type)
            null
        #else
          #if( !$util.isNull($ctx.result) )
            #set( $item = $ctx.result )
            #if( !$util.isNull($item.reference) )
              #set( $reference =  $util.parseJson($item.reference) )
            #end
            #set( $Integer = 0 )
            #set( $entity = $util.defaultIfNull($item.entity_state, {}) )
            $util.qr( $entity.put("__typename", $item.entity_type) )
            $util.qr( $entity.put("_id", $item.entity_id) )
            $util.qr( $entity.put("_type", $item.entity_type) )
            $util.qr( $entity.put("_version", $Integer.parseInt($item.event_id)) )
            $util.qr( $entity.put("_updatedAt", $util.time.epochMilliSecondsToISO8601($item.event_time)) )
            $util.qr( $entity.put("_updatedBy", $item.event_author) )
            $util.qr( $entity.put("_createdAt", $util.time.epochMilliSecondsToISO8601($item.entity_created_at)) )
            $util.qr( $entity.put("_createdBy", $item.entity_created_by) )
            $util.toJson( $entity )
          #else
            null
          #end
        #end

  GetEntityVersionsFn:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt GraphqlGateway.ApiId
      DataSourceName: !GetAtt EventStoreDataSource.Name
      FunctionVersion: 2018-05-29
      Name: 'CevixeGetEntityVersionsFn'
      RequestMappingTemplate: |
        #set( $validType = !$util.isNullOrBlank($ctx.stash.type) )
        #set( $validId = !$util.isNullOrBlank($ctx.stash.id) )

        $util.qr( $util.validate( $validType, "entity type not specified" ) )
        $util.qr( $util.validate( $validId, "entity id not specified" ) )

        #set( $regex = "([a-z])([A-Z]+)")
        #set( $replacement = "$1-$2")
        {
            "version" : "2017-02-28",
            "operation" : "Query",
            "scanIndexForward" : false,
            "query" : {
              "expression": "event_source = :source",
              "expressionValues" : {
                ":source" : $util.dynamodb.toDynamoDBJson("/domain/$ctx.stash.type.replaceAll($regex, $replacement).toLowerCase()/$ctx.stash.id")
              }
            },
            "limit": $util.defaultIfNull(${ctx.stash.limit}, 20),
            "nextToken": $util.toJson($util.defaultIfNullOrBlank($ctx.stash.nextToken, null))
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
            $util.error($ctx.error.message, $ctx.error.type)
            null
        #else
          #set( $result = [] )
          #set( $Integer = 0 )
          #foreach( $item in $context.result.items  )
            $util.qr($result.add({
              "id": $Integer.parseInt($item.event_id),
              "time": "$util.time.epochMilliSecondsToISO8601($item.event_time)",
              "author": "$item.event_author"
            }))
          #end
          {
            "items": $util.toJson($result),
            "nextToken": $util.toJson($util.defaultIfNullOrBlank($context.result.nextToken, null))
          }
        #end
Outputs:
  GraphqlGatewayArn:
    Value: !GetAtt GraphqlGateway.Arn
    Export:
      Name: !Join [ '-', [ !Ref ApplicationName, 'GraphqlGatewayArn' ] ]
  GraphqlGatewayApiId:
    Value: !GetAtt GraphqlGateway.ApiId
    Export:
      Name: !Join [ '-', [ !Ref ApplicationName, 'GraphqlGatewayId' ] ]
  GraphqlGatewayGraphqlUrl:
    Value: !GetAtt GraphqlGateway.GraphQLUrl
    Export:
      Name: !Join [ '-', [ !Ref ApplicationName, 'GraphqlGatewayUrl' ] ]

  CreateCommandEventFnId:
    Value: !GetAtt CreateCommandEventFn.FunctionId
    Export:
      Name: !Join [ '-', [ !Ref ApplicationName, 'CreateCommandEventFnId' ] ]
  PublishEventMessageFnId:
    Value: !GetAtt PublishEventMessageFn.FunctionId
    Export:
      Name: !Join [ '-', [ !Ref ApplicationName, 'PublishEventMessageFnId' ] ]
  GetEventByIdFnId:
    Value: !GetAtt GetEventByIdFn.FunctionId
    Export:
      Name: !Join [ '-', [ !Ref ApplicationName, 'GetEventByIdFnId' ] ]
  GetDomainEventsFnId:
    Value: !GetAtt GetDomainEventsFn.FunctionId
    Export:
      Name: !Join [ '-', [ !Ref ApplicationName, 'GetDomainEventsFnId' ] ]
  GetTransactionEventsFnId:
    Value: !GetAtt GetTransactionEventsFn.FunctionId
    Export:
      Name: !Join [ '-', [ !Ref ApplicationName, 'GetTransactionEventsFnId' ] ]

  GetEntitiesByTypeFnId:
    Value: !GetAtt GetEntitiesByTypeFn.FunctionId
    Export:
      Name: !Join [ '-', [ !Ref ApplicationName, 'GetEntitiesByTypeFnId' ] ]
  GetEntityByIdFnId:
    Value: !GetAtt GetEntityByIdFn.FunctionId
    Export:
      Name: !Join [ '-', [ !Ref ApplicationName, 'GetEntityByIdFnId' ] ]
  GetEntityVersionFnId:
    Value: !GetAtt GetEntityVersionFn.FunctionId
    Export:
      Name: !Join [ '-', [ !Ref ApplicationName, 'GetEntityVersionFnId' ] ]
  GetEntityVersionsFnId:
    Value: !GetAtt GetEntityVersionsFn.FunctionId
    Export:
      Name: !Join [ '-', [ !Ref ApplicationName, 'GetEntityVersionsFnId' ] ]
